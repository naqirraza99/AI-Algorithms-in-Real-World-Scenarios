import numpy as np
import matplotlib.pyplot as plt

# Constants for players
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

# Initialize the Tic Tac Toe board
def initialize_board():
    return np.full((3, 3), EMPTY)

# Function to check if a move is valid
def is_valid_move(board, row, col):
    return board[row, col] == EMPTY

# Function to check for a winner
def check_winner(board):
    for row in range(3):
        if all(board[row, col] == PLAYER_X for col in range(3)):
            return PLAYER_X
        if all(board[row, col] == PLAYER_O for col in range(3)):
            return PLAYER_O
            
    for col in range(3):
        if all(board[row, col] == PLAYER_X for row in range(3)):
            return PLAYER_X
        if all(board[row, col] == PLAYER_O for row in range(3)):
            return PLAYER_O
            
    if all(board[i, i] == PLAYER_X for i in range(3)):
        return PLAYER_X
    if all(board[i, i] == PLAYER_O for i in range(3)):
        return PLAYER_O
    if all(board[i, 2 - i] == PLAYER_X for i in range(3)):
        return PLAYER_X
    if all(board[i, 2 - i] == PLAYER_O for i in range(3)):
        return PLAYER_O
    
    return None

# Visualize the current board state
def visualize_board(board):
    plt.imshow(board == EMPTY, cmap='gray', vmin=-1, vmax=1)
    for i in range(3):
        for j in range(3):
            plt.text(j, i, board[i, j], ha='center', va='center', fontsize=40)
    plt.xticks([])  # Hide x ticks
    plt.yticks([])  # Hide y ticks
    plt.title("Tic Tac Toe Board")
    plt.show()

# Start the game
def play_tic_tac_toe():
    board = initialize_board()
    current_player = PLAYER_X

    while True:
        visualize_board(board)
        print(f"Player {current_player}, enter your move (row and column): ")
        
        try:
            row = int(input("Row (0, 1, or 2): "))
            col = int(input("Column (0, 1, or 2): "))

            if not (0 <= row < 3) or not (0 <= col < 3):
                print("Invalid input. Please enter numbers between 0 and 2.")
                continue
            
            if is_valid_move(board, row, col):
                board[row, col] = current_player
            else:
                print("Invalid move. That cell is already occupied.")
                continue

            winner = check_winner(board)
            if winner:
                visualize_board(board)
                print(f"Player {winner} wins!")
                break
            
            if np.all(board != EMPTY):
                visualize_board(board)
                print("It's a draw!")
                break
            
            current_player = PLAYER_O if current_player == PLAYER_X else PLAYER_X
            
        except ValueError:
            print("Invalid input. Please enter numeric values.")

# Run the game
play_tic_tac_toe()
